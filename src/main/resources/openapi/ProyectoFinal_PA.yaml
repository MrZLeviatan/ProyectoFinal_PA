openapi: 3.0.0
info:
  title: Proyecto Final | Plataforma de Reportes Ciudadanos.
  description: Plataforma para que los ciudadanos reporten situaciones de riesgo o emergencia en su entorno. Los usuarios pueden registrarse, iniciar sesión, realizar reportes y comentar en los reportes de otros.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Servidor local de desarrollo (Demo)

tags:
  - name: Usuario
    description: Gestión de usuarios.
  - name: Moderador
    description: Gestión de moderadores.
  - name: Reporte
    description: Gestión de reportes
  - name: Comentarios
    description: Comentarios en reportes


paths:
# Apis del Usuario, con sus funcionalidades.
  /usuario:
    post:
      summary: Registrar un nuevo usuario.
      tags:
        - Usuario
      description: Registra un nuevo usuario en el sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usuario"
      responses:
        "201":
          description: Usuario registrado exitosamente. Código de activación enviado.
        "400":
          description: Error en los datos enviados

  /usuario/activate:
    post:
      summary: Activación de cuenta
      tags:
        - Usuario
      description: Activa la cuenta de un usuario mediante el código enviado por correo. Este código es válido por 15 minutos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivaciónCuentaRequest"
      responses:
        '200':
          description: Cuenta activada exitosamente.
        '400':
          description: Código invalido o expirado.

  /usuario/{id}:
    get:
      summary: Obtener usuario por ID (Cedula)
      tags:
        - Usuario
      description: Devuelve los datos de un usuario específico mediante su Id (Cedula)
      parameters:
        - name: id
          in: path
          required: true
          description: ID (Cedula) del usuario a obtener
          schema:
            type: string
      responses:
        "200":
          description: Datos del usuario obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usuario"
        "404":
          description: Id del Usuario no encontrado

  /usuario/{email}:
    get:
      summary: Obtener usuario por Email
      tags:
        - Usuario
      description: Devuelve los datos de un usuario específico mediante su Email
      parameters:
        - name: email
          in: path
          required: true
          description: Email del usuario a obtener
          schema:
            type: string
      responses:
        "200":
          description: Datos del usuario obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usuario"
        "404":
          description: Email del Usuario no encontrado

  /usuario/{id}/{email}/update:
    put:
      summary: Actualizar usuario
      tags:
        - Usuario
      description: Modifica los datos de un usuario existente
      parameters:
        - name: id
          in: path
          required: true
          description: Id (Cedula) del usuario a actualizar
          schema:
            type: string
        - name: email
          in: path
          description: Email del usuario a actualizar
          schema:
            type: string
        - name: password
          in: path
          required: true
          description: Password del usuario a actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Usuario"
      responses:
        "200":
          description: Usuario actualizado exitosamente
        "404":
          description: Usuario no encontrado

  /usuario/{id}/delete:
    delete:
      summary: Eliminar usuario
      tags:
        - Usuario
      description: Borra un usuario del sistema
      parameters:
        - name: id
          in: path
          required: true
          description: Id (Cedula) del usuario a eliminar
          schema:
            type: string
        - name: password
          in: path
          required: true
          description: Password del usuario a eliminar
          schema:
            type: string
      responses:
        "204":
          description: Usuario eliminado exitosamente
        "404":
          description: Usuario no encontrado


#Apis del reporte, con sus funcionalidades.
  /reporte:
    get:
      summary: Obtener todos los reportes de la plataforma.
      tags:
        - Reporte
      description: Permite obtener todos los reportes registrados en la plataforma,
      responses:
        '200':
          description: Lista de reportes obtenida.

  /reporte/{id}:
    get:
      summary: Obtener el reporte mediante su id.
      tags:
        - Reporte
      description: Devuelve los datos de un reporte mediante su Id.
      parameters:
        - name: id
          in: path
          required: true
          description: Id del reporte a obtener
          schema:
            type: integer
      responses:
        "200":
          description: Datos del reporte obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reporte"
        "404":
          description: Id del reporte no encontrado

  /reporte/usuario:
    post:
      summary: Usuario registra un reporte.
      tags:
        - Reporte
      description: Un usuario registra un reporte.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reporte"
      responses:
        "201":
          description: Registro del reporte exitoso.
        "400":
          description: Error en los datos enviados

  /reporte/{id}/usuario/update:
    put:
      summary: Editar reporte
      tags:
        - Reporte
      description: Modificar los datos de un reporte
      parameters:
        - name: id
          in: path
          required: true
          description: Id del reporte ah actualizar.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reporte"
      responses:
        "200":
          description: Reporte actualizado exitosamente
        "404":
          description: Reporte no encontrado


  /reporte/{id}/usuario/delete:
    delete:
      summary: Eliminar reporte
      tags:
        - Reporte
      description: Borra un reporte del usuario
      parameters:
        - name: id
          in: path
          required: true
          description: Id del reporte a eliminar
          schema:
            type: integer
      responses:
        "204":
          description: Reporte eliminado exitosamente
        "404":
          description: Reporte no encontrado

  /reporte/{id}/importante:
    post:
      summary: Marcar un reporte como importante
      tags:
        - Reporte
      description: Permite a los usuarios calificar un reporte como importante para priorizar según su veracidad
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reporte marcado como importante exitosamente.
        '400':
          description: Error de solicitud.

  /reporte/{id}/resuelto:
    post:
      summary: Marca un reporte como resuelto.
      tags:
        - Reporte
      description: Permite al Usuario/Moderador cambiar el estado de su reporte a 'Resuelto' cuando lo considere.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reporte marcado como resuelto exitosamente.
        '404':
          description: Reporte no encontrado
        '400':
          description: Error de solicitud.


  /reporte/usuario/{idUsuario}:
    get:
      summary: Obtener reportes de un usuario especifico.
      tags:
        - Reporte
      description: Devuelve una lista de reportes asociado a un usuario en particular.
      parameters:
        - name: idUsuario
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lista de reportes del usuario obtenido exitosamente.


#Apis de los comentarios
  /reporte/{id}/usuario/comentario:
    post:
      summary: Agregar un comentario a un reporte.
      tags:
        - Reporte
        - Comentarios
      description: Permite a los usuarios agregar comentarios a un reporte especifico.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comentario"
      responses:
        '201':
          description: Respuesta agregada exitosamente al comentario.
        '400':
          description: Error en los datos de entrada.

  /comentario/{id}/respuesta:
    post:
      summary: Agrega una respuesta a un comentario.
      tags:
        - Comentarios
      description: Permite a los usuarios agregar respuestas a un comentario específico.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comentario"
      responses:
        '201':
          description: Respuesta agregada exitosamente al comentario.
        '400':
          description: Error datos de entrada.

  /comentario/{id}/update:
    put:
      summary: Actualizar comentario.
      tags:
        - Comentarios
      description: Modifica los datos de un comentario existente
      parameters:
        - name: id
          in: path
          required: true
          description: Id del comentario ah actualizar
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comentario"
      responses:
        "200":
          description: Comentario actualizado exitosamente
        "404":
          description: Comentario no encontrado

  /comentario/{id}/delete:
    delete:
      summary: Eliminar un comentario y sus respuestas
      tags:
        - Comentarios
      description: Permite a los usuarios eliminar un comentario. Si el comentario tiene respuestas, también serán eliminadas.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comentario eliminado correctamente junto a sus respuestas,
        '400':
          description: Error de solicitud.

#Apis del Moderador, con sus funcionalidades.

  /moderador/{id}:
    put:
      summary: Actualiza la cuenta del propio Moderador.
      tags:
        - Moderador
      description: Permite al moderador actualizar los datos de su propia cuenta.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Moderador actualizado exitosamente
        '404':
          description: Moderador no encontrado
        '400':
          description: Error en los datos enviados.

    delete:
      summary: Elimina la cuenta del propio Moderador.
      tags:
        - Moderador
      description: Permite al moderador eliminar su propia cuenta.
      parameters:
        - name: id
          in: path
          required: true
          description: Id (Cedula) del moderador a eliminar
          schema:
            type: string
        - name: password
          in: path
          required: true
          description: Password del moderador a eliminar
          schema:
            type: string
      responses:
        "204":
          description: Moderador eliminado exitosamente
        "404":
          description: Moderador no encontrado

  /moderador/categorias:
    post:
      summary: Crear una nueva categoría de reporte
      tags:
        - Moderador
      description: Permite a los moderadores agregar nuevas categorías de reportes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: Categoría creada exitosamente.
    get:
      summary: Obtener todas las categorías
      tags:
        - Moderador
      description: Permite a los moderadores ver las categorías de reportes existentes.
      responses:
        '200':
          description: Categorías obtenidas exitosamente.
    delete:
      summary: Eliminar una categoría
      tags:
        - Moderador
      description: Permite a los moderadores eliminar una categoría específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Categoría eliminada exitosamente.
    put:
      summary: Actualizar una categoría
      tags:
        - Moderador
      description: Permite actualizar los datos de una categoría
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: Categoría actualizada exitosamente.

  /moderador/reporte/{id}/respuesta:
    put:
      summary: Rechazar un reporte
      tags:
        - Moderador
      description: Permite a los moderadores rechazar un reporte con una razón específica.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectReportRequest'
      responses:
        '200':
          description: Reporte rechazado exitosamente y el usuario tiene 5 días para corregirlo.

  /moderator/reports/generate-report:
    get:
      summary: Generar informe de reportes
      tags:
        - Moderador
      description: Permite a los moderadores generar informes de reportes filtrados por sector, categoría y período de tiempo. El informe puede visualizarse en la web y descargarse en PDF.
      parameters:
        - name: sector
          in: query
          schema:
            type: string
        - name: categoria
          in: query
          schema:
            type: string
        - name: fecha_inicio
          in: query
          schema:
            type: string
            format: date
        - name: fecha_fin
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Informe generado exitosamente con una lista de reportes.



  /login:
    post:
      summary: Iniciar sesión
      description: Verifica las credenciales del Usuario/Moderador y devuelve un token de sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    # Buena práctica ante la seguridad sel sitio web.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Credenciales incorrectas

  /nofiticaciones:
    get:
      summary: Obtener notificaciones de usuario
      description: Devuelve la lista de notificaciones del usuario, incluyendo reportes nuevos en su zona.
      responses:
        '200':
          description: Lista de notificaciones obtenida exitosamente.

    post:
        summary: Enviar notificación a un usuario
        description: Envia una notificación en tiempo real a un usuario usando WebSockets o Firebase Cloud Messaging.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
        responses:
          '200':
            description: Notificación enviada exitosamente.

  /notifications/{id}:
    get:
      summary: Obtener el detalle de una notificación
      description: Devuelve la información completa de una notificación, incluyendo comentarios y detalles del reporte relacionado.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detalle de la notificación obtenido exitosamente.

components:
  schemas:
# Esquemas para las API's del usuario.
    Usuario:
      type: object
      properties:
        id:
          type: string
          example: "1001330212"
        nombre:
          type: string
          example: "Nicolas Cabrera"
        direccion:
          type: string
          example: "Calle 5 norte"
        estado:
          type: string
          enum: [ "Activo","Inactivo" ]
          example: "Inactivo"
        user:
          type: object
          properties:
            rol:
              type: string
              enum: [ "Moderador","Usuario","Megatron" ]
              example: "Usuario"
            password:
              type: string
              example: "nicolas1001"
            email:
              type: string
              example: "nicolasC@example.com"

#Esquema del reporte.
    Reporte:
      type: object
      properties:
        Id:
          type: integer
          format: id
          example: 350
        IdUsuario:
          type: string
          example: "1001330212"
        titulo:
          type: string
          example: "Reporte de Nicolas"
        categoria:
          type: string
          enum: [ "seguridad","emergencia médica","infraestructura","mascotas","comunidad" ]
          example: "seguridad"
        estaResuelto:
          type: boolean
          example: false
        descripcion:
          type: string
          format: descripción
          example: "Problemas de robos y violencia"
        estaVerificacion:
          type: boolean
          example: false
        ubicacion:
          type: object
          properties:
            latitud:
              type: number
              format: float
              example: -34.6037
            longitud:
              type: number
              format: float
              example: -58.3816
        foto:
          type: string
          format: uri
          example: "https://example.com/foto-reporte.jpg"
        numImportancia:
          type: integer
          example: 0
        comentarios:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Comentario'

#Esquema de los comentarios.
    Comentario:
      type: object
      properties:
        idComentario:
          type: integer
          example: 101
        idUsuario:
          type: string
          example: "1001330212"
        comentario:
          type: string
          example: "Tu comentario es pura falsedad"
        fecha:
          type: string
          format: data-time
          example: "2025-02-18T14:30:00Z"
        comentarios:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Comentario'

    ActivaciónCuentaRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        código:
          type: string
          example: "QR92"

    LoginRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            password:
              type: string
              format: password
              example: "nicolas1001"
            email:
              type: string
              format: email
              example: "nicolasC@example.com"
      required:
        - password
        - email

    UsuarioEmail:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "juan@example.com"

    CategoryRequest:
       type: object
       properties:
        nombre:
          type: string
          example: "Mascotas"

    RejectReportRequest:
      type: object
      properties:
        motivo:
          type: string
          example: "Falta de evidencia en el reporte."


    NotificationRequest:
      type: object
      properties:
        usuarioId:
          type: integer
          example: 123
        mensaje:
          type: string
          example: "Nuevo reporte de robo en tu zona."


